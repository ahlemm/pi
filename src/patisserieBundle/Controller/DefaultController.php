<?php

namespace patisserieBundle\Controller;
use patisserieBundle\Entity\Patisserie;
use patisserieBundle\Form\PatisserieType;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Serializer;


class DefaultController extends Controller
{
    /**
     * @Route("/patisserie/newAction", name="app_product_new")
     */
    public function newAction(Request $request)
    {
        $patisserie = new Patisserie();
        $form = $this->createForm(PatisserieType::class, $patisserie);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // $file stores the uploaded PDF file
            /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
            $file = $patisserie->getPhotoPatisserie();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('brochures_directory'),
                $fileName
            );

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $patisserie->setPhotoPatisserie($fileName);

            // ... persist the $product variable or any other work

            return $this->redirect($this->generateUrl('app_product_list'));
        }

        return $this->render('new.html.twig', array(
            'form' => $form->createView(),
        ));
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
    public function indexAction()
    {
        return $this->render('patisserieBundle:Default:Ajout_patisserie.html.twig');
    }
    public function adminAction()
    {
        return $this->render('patisserieBundle:Default:admin.html.twig');
    }


    public function addAction(Request $request)
    {
        if ($request->isMethod('POST')) {
            $patisserie = new Patisserie();
            $patisserie->setNomPatisserie($request->get('nom_patisserie'));
            $patisserie->setActivite($request->get('activite'));
            $patisserie->setInfoPatisserie($request->get('info_patisserie'));
            $patisserie->setLongitude($request->get('longitude'));
            $patisserie->setLatitude($request->get('latitude'));
            $patisserie->setAdressePatisserie($request->get('adresse_patisserie'));
            $patisserie->setEtatPatisserie($request->get('etat_patisserie'));
            $patisserie->setIdUser($request->get('id_user'));
            $patisserie->setPhotoPatisserie($request->get('photo_patisserie'));





            //var_dump($marque);die;
            $em = $this->getDoctrine()->getManager();
            $em->persist($patisserie);
            $em->flush();
            return new Response('patisserie ajoutée avec succées');
        }
        return $this->render('patisserieBundle:Default:Ajout_patisserie.html.twig');
    }



    public function listPatisseriesAction()
    {
        $patisserie = $this->getDoctrine()
            ->getRepository('patisserieBundle:Patisserie')
            ->findAll();
        return $this->render('patisserieBundle:Default:listPatisseries.html.twig', array(
            'patisserie'=>$patisserie
        ));
    }



    public function deleteAction($id)
    {
        $patisserie = $this->getDoctrine()
            ->getRepository('patisserieBundle:Patisserie')
            ->find($id);
        $em =$this->getDoctrine()->getManager();
        $em->remove( $patisserie);
        $em->flush();
        return $this->redirectToRoute('patisserie_list');
    }


    public function editAction(Request $request, $id)
    {
        $patisserie = $this->getDoctrine()->getRepository('patisserieBundle:Patisserie')->find($id);
        $form = $this->createForm(PatisserieType::class, $patisserie);
        $form->handleRequest($request);
        if ($form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->persist($patisserie);
            $em->flush();
            return $this->redirectToRoute('patisserie_list');
        }
        return $this->render('patisserieBundle:Default:patisserie_edit.html.twig', array(
            'form'=>$form->createView(),
            'patisserie' => $patisserie
        ));
    }


    public function lieuAction($id)
    {


        $em = $this->getDoctrine()->getManager();
        $mark = $em->getRepository('patisserieBundle:Patisserie')->find($id);

        $patisserie = $mark->getIdPatisserie();

        $pr = $em->getRepository('patisserieBundle:Patisserie')->find($patisserie);

        return $this->render('patisserieBundle:Default:locale.html.twig', array("em" => $pr
        ));

    }
    public function rechercherAction(Request $req)
    {
        $en=$this->getDoctrine()->getManager();
        $e= $en->getRepository('patisserieBundle:Patisserie')->findAll();
        if($req->isMethod('POST'))
        {
            $libelle=$req->get('NomProduit');
            $e= $en->getRepository('patisserieBundle:Patisserie')->findnomDQL($libelle);
        }
        return $this->render("patisserieBundle:Default:recherche.html.twig",array('mark'=>$e));
    }



    public function pdfAction()
    {
        $m = $this->getDoctrine()->getManager();
        $mark = $m->getRepository('patisserieBundle:Patisserie')->findAll();
        $snappy = $this->get('knp_snappy.pdf');
        foreach ($mark as $patisserie) {
            $m->remove($patisserie);
            $m->flush();
        }

        $html = $this->renderView('C:\xampp\htdocs\symfony\pi\src\patisserieBundle\Resources\views\Default\listPatisseries.html.twig"', array('m' => $mark
            //..Send some data to your view if you need to //
        ));

        $filename = 'myFirstSnappyPDF';

        return new Response(
            $snappy->getOutputFromHtml($html),
            200,
            array(
                'Content-Type' => 'application/pdf',
                'Content-Disposition' => 'inline; filename="' . $filename . '.pdf"'
            )
        );


    }


}
